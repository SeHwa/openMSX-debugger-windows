name: Build

on:
  push:
    branches:
      - master
      - github-workflow
  pull_request:
    branches:
      - master

env:
  package_origin: -github

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
      options: --user=0:0
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: docker://pvmm/mingw-arch:latest
            name: Windows
            cpu: x86_64
            os: mingw
          - image: debian:unstable
            name: GNU/Linux
            cpu: x86_64
            os: debian
    steps:
    - name: configure base system
      run: |
        if [ "${{ matrix.os }}" = "debian" ]; then
          export DEBIAN_FRONTEND=noninteractive
          export DEBCONF_NONINTERACTIVE_SEEN=true
          apt-get -y update
          apt-get -y install tzdata
          echo "America/Sao_Paulo" > /etc/timezone
          cp /etc/timezone /tz
          cp /etc/localtime /tz
          apt-get -y install git build-essential python3 qtbase5-dev qt5-qmake
        fi
        git config --global init.defaultBranch master
    - name: checkout repository code
      uses: actions/checkout@v3
    - name: compile repository code
      run: |
        if [ "${{ matrix.os }}" = "mingw" ]; then
          # Setting QT_INSTALL_BINS differently won't work since it's overwritten.
          #export QT_INSTALL_BINS=/usr/x86_64-w64-mingw32/lib/qt/bin/
          export OPENMSX_TARGET_OS=mingw32
          export CXX=/usr/bin/x86_64-w64-mingw32-g++
          export WINDRES=/usr/bin/x86_64-w64-mingw32-windres
          ln -sf /usr/x86_64-w64-mingw32/lib/qt/bin/uic /usr/x86_64-w64-mingw32/bin/uic
          ln -sf /usr/x86_64-w64-mingw32/lib/qt/bin/moc /usr/x86_64-w64-mingw32/bin/moc
          ln -sf /usr/x86_64-w64-mingw32/lib/qt/bin/rcc /usr/x86_64-w64-mingw32/bin/rcc
          QMAKE=/usr/x86_64-w64-mingw32/lib/qt/bin/qmake make
        else
          make
        fi
    - name: Determine version and file name
      id: get-version
      run: |
        #VERSION=`python3 build/version.py`
        if [ '${{ github.event_name }}' == 'pull request' ]; then
          tag_name=pr${{ github.run_attempt }}
          draft=true
          prerelease=false
        else
          if [ "${{ github.ref_name }}" =~ rc[0-9]?$ ]; then
            draft=true
            prerelease=true
          else
            if [ "${{ github.ref_name }}" =~ ^v[0-9] ]; then
              draft=false
              prerelease=false
            fi
          fi
          tag_name=${{ github.ref_name }}
        fi
        echo "::set-output name=draft::$draft"
        echo "::set-output name=prerelease::$prerelease"
        echo "::set-output name=tag_name::$tag_name"
        PACKAGE_NAME="debugger-${{ matrix.cpu }}-${{ matrix.os }}${{ env.package_origin }}"
        echo "::set-output name=target_file::${PACKAGE_NAME}"
        echo "Package name set to '${PACKAGE_NAME}'"
        # Check if body file exists?
    - name: Prepare redistributable directory
      run: |
        cd derived/bin
        if [ "${{ matrix.os }}" = "mingw" ]; then
          /usr/bin/x86_64-w64-mingw32-strip openmsx-debugger.exe
          find /usr/x86_64-w64-mingw32 -name 'libbrotlicommon.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libbrotlidec.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libbz2-1.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libfreetype-6.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libgcc_s_seh-1.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libglib-2.0-0.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libgraphite2.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libharfbuzz-0.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libiconv-2.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libintl-8.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libpcre-1.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libpcre2-16-0.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libpng16-16.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libssp-0.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libstdc++-6.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libwinpthread-1.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'Qt5Core.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'Qt5Gui.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'Qt5Network.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'Qt5Widgets.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'zlib1.dll' -exec cp {} . \;
          mkdir platforms
          cp -rp /usr/x86_64-w64-mingw32/lib/qt/plugins/platforms/qwindows.dll platforms/
        fi
    - name: Upload redistributable package for ${{ matrix.name }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.get-version.outputs.target_file }}
        path: |
          derived/bin

  release:
    name: Release project packages
    runs-on: ubuntu-latest
    needs: build
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.get-version.outputs.target_file }}
      - name: View content
        id: get-dir
        run: |
          target_debian=$(find . -maxdepth 1 -type d -name "*-debian-*" -printf %f)
          target_mingw=$(find . -maxdepth 1 -type d -name "*-mingw-*" -printf %f)
          echo "::set-output name=target_debian::$target_debian"
          echo "::set-output name=target_mingw::$target_mingw"

      - name: Creating Debian package
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "${{ steps.get-dir.outputs.target_debian }}"
          filename: "${{ steps.get-dir.outputs.target_debian }}.zip"

      - name: Creating MinGW package
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "${{ steps.get-dir.outputs.target_mingw }}"
          filename: "${{ steps.get-dir.outputs.target_mingw }}.zip"

      - name: Create GitHub release
        id: create-new-release-debian
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: "Debian build number ${{ github.ref_name }}-${{ github.run_number }}"
          tag_name: ${{ github.run_number }}
          draft: ${{ steps.check-body.outputs.HAS_BODY_FILE }}
          body: ${{ github.event.head_commit.message }}

      - name: Create GitHub release
        id: create-new-release-mingw
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: "Windows (MinGW) build number ${{ github.ref_name }}s-${{ github.run_number }}"
          tag_name: ${{ github.run_number }}
          draft: ${{ steps.check-body.outputs.HAS_BODY_FILE }}
          body: ${{ github.event.head_commit.message }}

      - name: Upload Debian release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release-debian.outputs.upload_url }}
          asset_path: ${{ steps.get-dir.outputs.target_debian }}/${{ steps.get-dir.outputs.target_debian }}.zip
          asset_name: ${{ steps.get-dir.outputs.target_debian }}.zip
          asset_content_type: application/zip

      - name: Upload MinGW release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release-mingw.outputs.upload_url }}
          asset_path: ${{ steps.get-dir.outputs.target_mingw }}/${{ steps.get-dir.outputs.target_mingw }}.zip
          asset_name: ${{ steps.get-dir.outputs.target_mingw }}.zip
          asset_content_type: application/zip

